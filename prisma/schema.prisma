generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @default(now()) @map(name: "updated_at")
  password       String?
  institution_id String?   @map(name: "institution_id")

  isApproved Boolean   @default(false) @map(name: "is_approved")
  approvedBy String?   @map(name: "approved_by")
  approvedAt DateTime? @map(name: "approved_at")

  roles String[] @default(["USER"])

  accounts Account[]
  sessions Session[]
  Post     Post[]
  Student  Student[]
  Status   Status?

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  authorId  String

  author User @relation(fields: [authorId], references: [id])

  @@map(name: "posts")
}

model Student {
  id                   String    @id @default(cuid())
  name                 String
  admissionNo          String?   @map("admission_no")
  parentName           String?   @map("parent_name")
  parentAddress        String?   @map("parent_address")
  phoneNo              String?   @map("phone_no")
  caste                String?
  religion             String?
  dateOfBirth          DateTime? @map("date_of_birth")
  dateOfAdmission      DateTime? @map("date_of_admission")
  class                String?
  previousInstitution  String?   @map("previous_instution")
  tcRecievedDate       DateTime? @map("tc_recieved_date")
  tcRecievedNo         String?   @map("tc_recieved_no")
  otherFields          Json?
  // Issued fields
  conduct              String?
  dateOfLeaving        DateTime? @map("date_of_leaving")
  classAtTimeOfLeaving String?   @map("class_at_time_of_leaving")
  reasonForLeaving     String?   @map("reason_for_leaving")
  tcIssuedNo           String?   @map("tc_issued_no")
  tcIssuedDate         DateTime? @map("tc_issued_date")
  tcIssuedBy           String?   @map("tc_issued_by")
  remarks              String?
  // General fields
  createdAt            DateTime  @default(now()) @map(name: "created_at")
  updatedAt            DateTime  @default(now()) @map(name: "updated_at")
  createdBy            User      @relation(fields: [createdById], references: [id])
  createdById          String    @map("created_by")
  // Deleted fields
  deletedAt            DateTime? @map(name: "deleted_at")
  deletedBy            String?   @map(name: "deleted_by")
  deletedReason        String?   @map(name: "deleted_reason")
  deleted              Boolean   @default(false)

  @@index([name])
  @@index([admissionNo])
  @@index([createdById])
}

model Status {
  userId String @unique @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  totalStudents          Int @default(0) @map(name: "total_students")
  totalTCIssued          Int @default(0) @map(name: "total_tc_issued")
  totalTCIssuedThisMonth Int @default(0) @map(name: "total_tc_issued_this_month")
  totalTCIssuedThisYear  Int @default(0) @map(name: "total_tc_issued_this_year")

  @@map(name: "status")
}
